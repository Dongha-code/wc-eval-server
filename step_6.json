{
  "step": "STEP 6",
  "title": "스크립트 실전 관리 항목",
  "sections": [
    "스크립트 배포 시간 확인 및 중복 삽입 방지",
    "특수문자 인코딩 처리 및 변수 누락 방지",
    "설치 환경별 대응: 브라우저/플랫폼 케이스",
    "설치 이슈 점검 시나리오 및 디버깅 팁"
  ],
  "context": "[STEP 6-1] 스크립트 배포 시간 확인 및 중복 삽입 방지\n[STEP 6-2] 특수문자 인코딩 처리 및 변수 누락 방지\n[STEP 6-3] 설치 환경별 대응: 브라우저/플랫폼 케이스\n[STEP 6-4] 설치 이슈 점검 시나리오 및 디버깅 팁\n[STEP 6-1] 스크립트 배포 시간 확인 및 중복 삽입 방지\n✅ 개념 요약\n스크립트(\nntm.js\n또는\ninstall.js\n)는 기능 변경이나 신규 태그 반영 시 배포가 필요하며, 배포된 파일이 실제 서비스에 적용되었는지 확인하려면 브라우저 개발자 도구(Network 탭)를 활용하여 배포 시간(\nLast-Modified\n값)을 확인하는 것이 핵심입니다.\n또한, 스크립트가 페이지에\n중복 삽입되면 태그가 반복 실행되거나 로그가 중복 전송되는 문제\n가 발생할 수 있습니다.\n✅ 스크립트 배포 시간 확인 방법\n💡 확인 절차 (Chrome 기준)\n웹사이트 접속 → F12 →\nNetwork 탭\n선택\n필터에서\nntm.js\n또는\ninstall.js\n검색\n해당 항목 클릭 →\nHeaders 탭\n확인\nLast-Modified\n항목에서\n서버에서 마지막으로 배포된 시간\n확인 가능\n💡\nLast-Modified\n값이 최근 배포한 시간과 일치하지 않으면,\n캐시 문제\n또는\n배포 누락\n가능성 있음\n✅ 스크립트 중복 삽입 방지\n💡 중복 삽입의 증상\n동일 태그가\n여러 번 실행\n로그가 중복 전송되며 ClickHouse나 DB에서 이상치로 잡힘\n콘솔에서\nNtm already defined\n와 같은 오류 발생\n💡 방지 코드 예시 (JS 내 삽입)\nif (!window._ntmLoaded) {\n  window._ntmLoaded = true;\n  var script = document.createElement('script');\n  script.src = 'https://cdn.example.com/ntm.js';\n  document.head.appendChild(script);\n}\n💡  실무 팁\nSPA 구조에서는 페이지 이동 시 스크립트 재삽입이 발생할 수 있으므로,\nVue/React의 루트 App 컴포넌트에서 1회만 삽입\n하도록 관리\n📌 학습 체크포인트\n스크립트 배포 후 실제 반영 여부를 확인하려면 어떤 브라우저 기능을 활용하나요?\nLast-Modified\n값은 어떤 기준으로 판단해야 하나요?\n스크립트가 중복 삽입되었을 때 발생할 수 있는 대표적인 증상은 무엇인가요?\nSPA 구조에서 중복 삽입을 방지하려면 어떤 위치에서 스크립트를 관리해야 할까요?\n[STEP 6-2] 특수문자 인코딩 처리 및 변수 누락 방지\n✅ 개념 요약\nWiseCollector에서 태그 실행 시 파라미터 값에\n한글, 특수문자, 해시태그\n등이 포함될 경우 적절히 인코딩되지 않으면 로그 수집 또는 변환 과정에서\n파라미터 누락, 태깅 실패, 변환 오류\n가 발생할 수 있습니다.\n또한 스크립트 실행 시점이나 값 초기화 미비로 인해\ncustomData, 쿠키, 전역 변수 등이 누락\n되는 경우도 잦습니다.\n✅ 특수문자 인코딩 처리\n💡 발생 원인\n사례\n설명\n한글/특수문자 직접 입력\nparam=<한글 테스트>\n→ 로그 누락\n%\n,\n#\n,\n&\n,\n<\n,\n>\n등 포함\n변환 시 JSON 파싱 에러, 파라미터 미추출\n💡 인코딩 전환 예시\n<한글 테스트>\n→\n%3C%ED%95%9C%EA%B8%80+%ED%85%8C%EC%8A%A4%ED%8A%B8%3E\n💡 대응 방법\n브라우저 Console에서 인코딩:\nencodeURI(\"<한글 테스트>\")\n사전 인코딩된 값 입력 또는\n분석 옵션 내 “파라미터 값 인코딩 처리” 항목 사용\n✅ # 해시태그 포함 URL의 로깅 이슈\n💡 문제\n#\n이후는 브라우저에서 Fragment(앵커)로 처리되어 서버에 전달되지 않음\n해시태그 뒤에 파라미터가 붙을 경우\n전부 무시됨\n💡 예시\nhttp://site.com/page.html#frag?para1=value1&tag1=value2\n→ 수집 시 `para1`, `tag1` 누락됨\n💡 해결 가이드\n해시태그는\n파라미터 앞에 위치하지 않도록\nURI 구성 필요\n필요한 값은 해시태그 내가 아닌\n파라미터 영역에 명시\n✅ 변수(customData, 쿠키 등) 누락 방지\n💡 주요 원인\n유형\n설명\n비동기 로딩\n변수 값이 아직 선언되지 않음 (\nundefined\n)\n전역 변수 미할당\n페이지 내\nwindow.변수명\n없음\n선언 순서 오류\nfireUserDefined가 먼저 실행됨\n💡 대응 방법\nif (window.customValue) {\n  Ntm.Variable.addOnParam({ customData: window.customValue });\n}\n또는\nwindow.addEventListener(\"NTMREADY\", ... )\n방식으로 보완\nsetTimeout\n지연 호출도 가능하나\n성능상 권장 방식은 아님\n📌 학습 체크포인트\n특수문자나 한글이 포함된 파라미터는 어떤 방식으로 인코딩해야 하나요?\n#\n해시태그 이후 파라미터가 전송되지 않는 이유는 무엇인가요?\ncustomData\n가 로그에 남지 않을 때 가장 먼저 확인해야 할 것은 무엇인가요?\nsetTimeout을 통한 변수 할당 지연은 어떤 상황에서만 신중하게 써야 하나요?\n[STEP 6-3] 설치 환경별 대응: 브라우저/플랫폼 케이스\n✅ 개념 요약\nWiseCollector 스크립트는 웹 표준을 기반으로 설계되었지만,\n브라우저별, OS별 기능 지원 차이\n로 인해 일부 환경에서 스크립트가 정상 작동하지 않거나 오류가 발생할 수 있습니다.\n특히 iOS의 Safari, Android WebView, Windows IE는 주의가 필요한 대표 사례입니다.\n✅ iOS Safari 호환성 이슈\n기능\n지원 시작 버전\n설명\nMutationObserver\niOS Safari 6 이상\nDOM 변경 감지\ncrypto.getRandomValues()\niOS Safari 7 이상\n난수 생성\nTextEncoder\niOS Safari 10.3 이상\nUTF-8 인코딩\nES6 기능 (let, const 등)\niOS Safari 10부터 안정적 지원\nES6 기반 태깅 함수 영향 있음\n💡 결론:\niOS Safari 10.3 이상부터 ntm.js 기능 완전 지원\n구버전(10 미만)에서는 일부 트리거/정규표현식 등이 정상 동작하지 않을 수 있음\n✅ Android WebView 테스트 환경 이슈\nOpenSSL 인증서를 사용하는 테스트 환경에서는 일부 모바일 WebView가\n인증서 거부\n로 인해 스크립트를 차단\n대응 방법:\nchrome://inspect\n기능으로 WebView 디버깅 연결\nWebView 클라이언트 설정에서 인증서 허용 처리 필요\n💡 모바일 QA 환경에서 이슈가 자주 발생하므로 테스트 가이드를 정리해 둘 것\n✅ Windows IE 및 구형 브라우저 이슈\nES6 문법(\nlet\n,\nconst\n,\n=>\n) 미지원 → ntm.js 로드 실패\nonload\n트리거가\n한 번만 실행되므로\n, SPA 환경에서는 스크립트 삽입 타이밍 중요\niframe, embed 등으로 인한 onload 이벤트 누락 발생 가능성 존재\n💡 대응 방안\nwindow.NTMREADY\n이벤트 기반 트리거 재정의\nsetTimeout\n보완 호출\ndocument.write 사용 금지\n💡 다양한 리소스가 로딩되지 않으면\nwindow.onload\n자체가 발생하지 않음\n📌 학습 체크포인트\niOS Safari 10 미만 버전에서 ntm.js가 정상 작동하지 않는 이유는 무엇인가요?\nAndroid WebView에서 테스트 중 인증서 오류가 발생하면 어떤 툴을 활용할 수 있나요?\nwindow.onload\n이벤트는 어떤 상황에서 발생하지 않을 수 있나요?\n구형 브라우저에서 스크립트 타이밍 이슈를 해결하기 위해 사용할 수 있는 방법은 무엇인가요?\n[STEP 6-4] 설치 이슈 점검 시나리오 및 디버깅 팁\n✅ 개념 요약\nWiseCollector 태그나 스크립트가 예상대로 작동하지 않는 경우,\n설치 누락, 트리거 오류, 변수 미전달, 타이밍 이슈 등\n다양한 원인이 존재할 수 있습니다.\n정확한 원인 파악을 위해서는 브라우저 개발자 도구(F12)를 활용한 진단과 함께,\nPreview 기능, 콘솔 로그, 태그 상태 확인\n등의 점검 루틴이 필요합니다.\n✅ 기본 점검 순서\n점검 항목\n확인 방법\n스크립트 정상 로딩 여부\nNetwork 탭에서\nntm.js\n,\ninstall.js\n요청 및 응답 확인\n태그 실행 여부\n콘솔에\nNtm.Event.fireUserDefined()\n로그 발생 여부\n파라미터 누락 여부\nNetwork 탭에서 전송된 URL 확인 (예:\nv=\n,\nproduct_id=\n포함 여부)\n태그 상태 확인\n관리자 UI에서 해당 태그가 “활성” 상태인지 확인\n✅ Preview 기능 점검 가이드\n관리자 UI에서\nPreview 버튼 클릭\n미리보기용 새 창 열림\n동작 테스트 수행 → 콘솔 또는 UI 하단에 로그 출력 확인\n로그가 미출력되는 경우: 태그 상태, 트리거 조건, 변수 로딩 여부 확인\n💡 일부 환경(iOS WebView 등)에서는 미리보기 스크립트 자체가 차단될 수 있으므로 유의\n✅ 로그 전송 확인 코드 예시\nconsole.log(\"파라미터:\", Ntm.Variable.get(\"clickElement\"));\n브라우저 콘솔에서 실행 후 로그 출력 여부 확인\nundefined 발생 시, 변수 선언 또는 트리거 타이밍 재검토 필요\n✅ 디버깅 시 유용한 명령어\nNtm.Plugin.nlogger.download(\"test_log\");\n수집 로그를 CSV로 다운로드 가능\n로컬 확인 또는 분석용으로 활용\n✅ 자주 발생하는 이슈 유형 (선택사항)\n유형\n설명\n대응\n태그 미실행\n트리거 조건 미충족\n조건식 재확인 or 단순 트리거 테스트\n파라미터 누락\n변수 로딩 전 실행됨\nwindow.onload\n트리거로 대체\n로그 전송 실패\n네트워크 오류 or 쿠키 이슈\nPreview 모드에서 요청 URL 직접 확인\n중복 로그\nfireUserDefined\n다중 호출\n트리거 구조 단순화, 호출 위치 조정\n📌 학습 체크포인트\n스크립트가 정상 로드되지 않았을 때 가장 먼저 확인해야 할 것은 무엇인가요?\nPreview 기능을 통해 태그 동작을 확인할 때, 로그가 출력되지 않으면 어떤 항목을 점검해야 하나요?\nclickElement\n가 undefined로 나오는 경우, 어떤 문제가 있을 수 있나요?\n중복 로그 발생 시 가장 먼저 확인해야 할 트리거 구성 요소는 무엇인가요?"
}