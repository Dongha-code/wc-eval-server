{
  "step": "STEP 7",
  "title": "고급 태깅 처리 & 디버깅",
  "sections": [
    "고급 태깅 처리: 해시태그, fireUserDefined, NTMREADY 활용",
    "콘솔 로깅 실습 및 테스트 방법",
    "커스텀 트리거 실행 조건 최적화",
    "NTM 내장 메소드 정리 및 활용 예시"
  ],
  "context": "[STEP 7-1] 고급 태깅 처리: 해시태그, fireUserDefined, NTMREADY 활용\n[STEP 7-2] 콘솔 로깅 실습 및 테스트 방법\n[STEP 7-3] 커스텀 트리거 실행 조건 최적화\n[STEP 7-4] NTM 내장 메소드 정리 및 활용 예시\n[STEP 7-1] 고급 태깅 처리: 해시태그, fireUserDefined, NTMREADY 활용\n✅ 개념 요약\n복잡한 사용자 행동을 수집하거나 SPA와 같은 비동기 구조 페이지에서 정확한 태깅을 수행하기 위해, WiseCollector는\n직접 이벤트를 발생시키는\nfireUserDefined()\n함수\n,\nntm.js 로딩 완료 후 실행을 보장하는\nNTMREADY 이벤트\n, 그리고 URL 구조 이슈 중 하나인\n해시태그 포함 처리 방식\n을 함께 지원합니다.\n✅ # 해시태그 로깅 처리 프로세스\n💡 문제\n#\n이후의 값은\n브라우저 클라이언트에서만 인식\n되고 서버로 전달되지 않음\nURL 내 파라미터로 판단되지 않으므로\n변환 태스크에서 필드 추출 불가\n💡 예시 케이스\nhttp://domain.com/page#frag?para1=value1&tag=value2\n→ #frag 이후는 전체 텍스트 처리됨 → para1, tag 모두 누락\n💡 해결 가이드\n해시태그를\n파라미터 앞에 두지 않도록 구성\n필요 시 해시값을\nJS로 별도 추출\n하여\ncustomData\n로 전송\nvar frag = location.hash.replace(\"#\", \"\");\nNtm.Variable.addOnParam({ \"frag_info\": frag });\n💡 해시가 파라미터로 해석되지 않는다는 점에서 구조 설계 단계에서 주의 필요\n✅ fireUserDefined 함수\n💡 역할\n페이지 내에서 스크립트 조건에 따라\n태그 실행을 수동으로 트리거\nNtm.Event.fireUserDefined(\"custom_event\", \"product_view_01\");\n태그 관리기에서 \"트리거 이름\"을\ncustom_event\n로 등록해야 정상 작동\ncustomData\n변수로 전달 가능 (object 포함 가능)\n✅ NTMREADY 이벤트 활용\n💡 문제\nntm.js\n가 아직 로딩되지 않았는데\nfireUserDefined\n를 호출하면 실패함\n💡 해결 방법\nif (window.Ntm) {\n  Ntm.Event.fireUserDefined(\"custom_event\");\n} else {\n  window.addEventListener(\"NTMREADY\", function () {\n    Ntm.Event.fireUserDefined(\"custom_event\");\n  });\n}\nNTMREADY\n는 ntm.js가 정상 로딩되면 브라우저에서 자동 발생\n✅ 비동기 환경에서 지연 호출\nSPA나 WebView 환경에서 변수나 요소가 로딩되기 전 트리거가 먼저 실행되는 경우, 다음과 같이\nsetTimeout 보조 호출\n을 활용할 수 있습니다.\nsetTimeout(function () {\n  Ntm.Event.fireUserDefined(\"custom_event\");\n}, 300);\n💡 단, 이 방식은 반복 호출 또는 예측 불가 지연이 발생할 수 있으므로,\nNTMREADY 기반 우선 사용 권장\n📌 학습 체크포인트\n해시태그(\n#\n)가 포함된 URL은 어떤 구조적 문제가 있으며, 어떻게 대응할 수 있나요?\nfireUserDefined()\n함수는 어떤 상황에서 쓰이며, 반드시 등록해야 할 항목은 무엇인가요?\nntm.js 로딩 이전에 태깅 이벤트가 실행되지 않도록 하기 위해 어떤 이벤트를 활용해야 하나요?\nsetTimeout\n방식과\nNTMREADY\n방식은 어떤 차이점이 있으며, 언제 각각 사용하는 것이 적절한가요?\n[STEP 7-2] 콘솔 로깅 실습 및 테스트 방법\n✅ 개념 요약\n태그 설정 후 동작을 검증하거나 디버깅이 필요할 때는\n브라우저 콘솔에서 직접 로그 전송 동작을 확인하는 것이 가장 빠르고 확실한 방법\n입니다.\nWiseCollector는\nNtm.Event.fireUserDefined()\n함수,\ncustomData\n변수,\nnlogger.download()\n등의 내장 함수로 로깅 확인을 지원합니다.\n✅ fireUserDefined 콘솔 실행 예시\nNtm.Event.fireUserDefined(\"custom_event\", {\n  type: \"manual\",\n  product_id: \"A123\"\n});\n\"custom_event\"\n는 태그 관리기에서 등록된 커스텀 트리거 이름이어야 합니다.\n두 번째 인자는 customData로 로그에 함께 전송됩니다.\nJSON 형식으로 값을 넘기면 파라미터로 자동 분리되어 기록됩니다\n✅ customData 값 확인\n💡 콘솔 로그로 직접 확인\nconsole.log(\"customData:\", Ntm.Variable.get(\"customData\"));\n로그가 정상적으로 저장되기 전에도 콘솔에서 변수 값을 미리 점검할 수 있음\nundefined 발생 시 변수 등록 시점 또는 오타 가능성 고려\n✅ nlogger.download 함수로 CSV 수집\nNtm.Plugin.nlogger.download(\"test_log\");\n로깅된 데이터가 CSV 파일 형태로 다운로드됨\nPreview 모드\n,\n운영 테스트\n,\n비정상 로그 검증\n에 매우 유용\n파일명은\ntest_log.csv\n로 저장됨\n✅ Preview 모드 로그 실습 팁\n항목\n설명\n미리보기 모드 진입\n태그 관리기 상단 Preview 버튼 클릭\n테스트 수행\n클릭, 페이지 이동 등 실제 시나리오 실행\n하단 로그 확인\n태그 매칭 여부, 전송 URL 확인\nconsole 확인\n오류 발생 시 메시지 출력 여부 확인\n💡 Preview 모드에서 문제가 발생하면\n트리거 조건\n,\n변수 등록 시점\n,\nntm.js 로딩 상태\n등을 점검해야 함\n📌 학습 체크포인트\nfireUserDefined 함수는 콘솔에서 어떻게 실행하며, customData는 어떤 형태로 전달되나요?\ncustomData가 undefined로 나올 경우 점검해야 할 항목은 무엇인가요?\nnlogger.download() 함수는 어떤 용도로 활용되며, 결과는 어떤 형식으로 제공되나요?\nPreview 모드에서 로그가 보이지 않을 때 점검해야 할 우선순위 항목은?\n[STEP 7-3] 커스텀 트리거 실행 조건 최적화\n✅ 개념 요약\n커스텀 트리거는 개발자가 명시적으로 호출할 수 있어 강력하지만, 잘못 사용하면\n중복 호출\n,\n불필요한 로그 생성\n,\n조건 충족 실패\n등 문제가 발생할 수 있습니다.\n정확한 조건 설정과 실행 타이밍 제어를 통해 트리거 실행을 최적화하는 것이 핵심입니다.\n✅ 중복 실행 방지 패턴\n💡 문제 사례\n클릭 이벤트가 여러 트리거에 중첩되어 있어 2~3회씩\nfireUserDefined()\n실행\nSPA 환경에서 페이지 이동 시 자동 실행 트리거와 수동 트리거가 중복 실행\n💡 대응 예시\nif (!window._customFired) {\n  window._customFired = true;\n  Ntm.Event.fireUserDefined(\"custom_event\");\n}\n또는\nsessionStorage\n,\nlocalStorage\n활용하여\n중복 실행 여부를 클라이언트 상태에 저장\n가능\n💡 SPA 페이지 init 구간에서 여러 번\nfireUserDefined()\n가 호출되지 않도록 개발자와 협의 필요\n✅ 조건 분기 로직 설계\n💡 예시: 사용자 타입에 따라 다른 트리거 실행\nif (userType === \"admin\") {\n  Ntm.Event.fireUserDefined(\"admin_event\");\n} else {\n  Ntm.Event.fireUserDefined(\"user_event\");\n}\n커스텀 이벤트 트리거는 목적별로 분리 관리 가능\n태그 관리기에서\n트리거 이름 별도 설정 필요\n✅ customData 전달 최적화\n전달되는 customData는 가능한 한\n단순하고 JSON 직렬화 가능한 구조\n로 제한\n중첩된 구조, 순환 참조 포함 시 로그 전송 실패 가능성 존재\n💡 예시 (권장 구조)\nNtm.Event.fireUserDefined(\"click_event\", {\n  menu_id: \"m001\",\n  action: \"click\",\n  source: \"main_banner\"\n});\n💡 주의\n배열, Date 객체, DOM 객체 등은 포함하지 않도록 유의\n숫자형은 따옴표 없이, 문자열은 따옴표 포함하여 전달\n✅ 커스텀 트리거 + 조건 예외 설정 (고급)\n태그 관리기 트리거 설정 메뉴에서\n예외 조건 트리거\n지정 가능\n예: 특정 페이지에서는 실행되지 않도록 설정\n💡 복수 예외 조건 설정 시, 하나라도 충족하면\n트리거 차단됨\n📌 학습 체크포인트\n커스텀 트리거가 중복 실행될 수 있는 대표적인 사례 2가지를 설명할 수 있나요?\n중복 실행 방지를 위해 어떤 방식으로 상태를 저장하거나 조건을 구성할 수 있나요?\ncustomData 전달 시 어떤 데이터 구조는 피해야 하며, 어떤 방식으로 작성하는 것이 바람직한가요?\n예외 조건 트리거는 어디에서 설정하며, 어떤 방식으로 동작하나요?\n[STEP 7-4] NTM 내장 메소드 정리 및 활용 예시\n✅ 개념 요약\nWiseCollector는 자바스크립트로 직접 조작 가능한\nNTM 내장 객체 함수\n를 제공합니다.\n태깅 대상 요소 추출, 쿠키 설정, UUID 발급, 버전 정보 확인 등\n고급 태깅 및 디버깅 작업에 유용하게 활용\n됩니다.\n아래는 가장 자주 사용되는 메소드들을 목적별로 분류한 요약입니다.\n✅ 클릭 요소 정보 확인 –\nNtm.Variable.get\n💡 사용 예시\nconst el = Ntm.Variable.get(\"clickElement\");\nconsole.log(\"클릭된 텍스트:\", el?.innerText);\n클릭된 요소(DOM 객체)를 반환\nscroll\n또는 자동 이벤트 시 undefined 발생 가능 →\n?.\n또는\n&&\n로 예외처리 권장\n✅ 쿠키 처리 –\nNtm.Cookie.set / get\n💡 쿠키 생성 예시\nNtm.Cookie.set(\"promo_id\", \"summer2025\", {\n  expires: \"Mon, 01 Jul 2025 00:00:00 GMT\",\n  domain: \"example.com\",\n  path: \"/\"\n});\n💡 쿠키 읽기 예시\nconst promo = Ntm.Cookie.get(\"promo_id\", true); // 디코딩해서 읽기\n쿠키 값은 로깅에 파라미터로 연계 가능\nexpires\n미지정 시 세션 종료 시 삭제됨\n✅ 고유 ID 발급 –\nNtm.Plugin.nlogger.generateUuid\n💡 예시\nconst uuid = Ntm.Plugin.nlogger.generateUuid();\nconsole.log(\"발급된 UUID:\", uuid);\n예:\n0c4ee875-6604-6422-9af6-2a9cce949958-1689233482554\n로그 식별자, 임시 이벤트 트래킹 ID로 활용 가능\n✅ 현재 버전 확인 –\nNtm.Settings.lastModified\n💡 예시\nconsole.log(\"태그 작업 버전:\", Ntm.Settings.lastModified);\n해당 페이지에 삽입된 태그의 마지막 적용 일시 확인 가능\n문제 발생 시\n버전 불일치 여부\n를 빠르게 파악할 수 있음\n✅ 기타 활용 메소드 예시 요약\n함수\n설명\nNtm.Plugin.nlogger.download()\n수집된 로그 CSV 다운로드\nNtm.Cookie.get(\"key\", true)\n쿠키 값을 디코딩해서 가져오기\nNtm.Variable.get(\"user_id\")\n특정 파라미터 직접 확인\nNtm.Event.fireUserDefined(\"trigger\", data)\n태깅 트리거 수동 호출\n📌 학습 체크포인트\nNtm.Variable.get(\"clickElement\")\n의 결과는 어떤 객체이며, 언제 undefined가 발생할 수 있나요?\n쿠키를 생성할 때\nexpires\n,\ndomain\n,\npath\n속성은 각각 어떤 역할을 하나요?\ngenerateUuid()\n함수는 어떤 용도로 활용하면 좋을까요?\nlastModified\n속성은 태그 운영 측면에서 어떤 의미를 가지며, 어떤 상황에서 점검해야 하나요?"
}