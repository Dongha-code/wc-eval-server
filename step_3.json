{
  "step": "STEP 3",
  "title": "사용자 계정 및 보안 설정",
  "sections": [
    "로그인 및 계정 보안 설정",
    "세션 관리 및 로그인 보안 강화 설정",
    "암호화 및 SSO 설정"
  ],
  "context": "[STEP 3-1] 로그인 및 권한 구조\n[STEP 3-2] 세션 및 중복 로그인 설정\n[STEP 3-3] 암호화 및 SSO 설정\n[STEP 3-1] 로그인 및 권한 구조\n✅ 개념 요약\nWiseCollector의 관리 시스템은 사용자 ID 및 역할 기반의\n계정 권한 제어 시스템\n을 갖추고 있으며, 접속 가능 범위와 기능 사용 권한은\n계정 유형별로 세분화\n되어 있습니다.\n관리자는 각 사용자의 로그인 이력, 권한 그룹, 비밀번호 정책 등을 설정할 수 있습니다.\n✅ 사용자 권한 설정\n✔ 설정 경로:\nManager > 사용자관리 메뉴\n✔ 각 사용자에게 권한 그룹별 기능 할당 가능\n기능 항목\n최고 관리자\n승인 관리자\n일반 관리자\n일반 사용자\n설정 조회/편집\n✅\n⚠ 일부 제한\n⚠ 제한\n❌\n태그/트리거 관리\n✅\n✅\n✅\n❌\n수집/변환 설정\n✅\n✅\n✅\n❌\n로그 조회\n✅\n✅\n✅\n✅\n계정 관리\n✅\n✅\n✅\n❌\n✅ 계정 생성 규칙 설정\n✔ 설정 파일:\nmanager/bin/process.properties\n✔ 예시 설정:\n# 계정 규칙 (예: 아이디 5자 이상, 영문+숫자 조합)\naccount.policy.id.rule=^[a-zA-Z][a-zA-Z0-9_]{4,}$\n사용자 계정(ID)은 고객사 보안 정책에 따라 커스터마이징 가능\n아이디 형식은 정규표현식으로 제한 가능\n✅ 로그인 정보 확인 항목\nuser_access_history_yyyymmdd\n로그 파일을 통해 로그인 시간, IP, 사용자 ID 확인 가능\n관리자 화면에서도 접속 이력 및 상태 열람 가능\n📌 학습 체크포인트\nWiseCollector의 사용자 권한 그룹은 몇 단계로 구분되며, 각각 어떤 역할을 수행하나요?\n계정 생성 규칙은 어떻게 설정하며, 어떤 설정 파일을 수정해야 하나요?\n사용자 로그인 정보는 어디에 기록되며, 보안 감사를 위해 어떻게 활용되나요?\n[STEP 3-2] 세션 및 중복 로그인 설정\n✅ 개념 요약\nWiseCollector는 사용자 로그인을 기반으로 동작하며,\n세션 유지 시간\n및\n중복 로그인 허용 여부\n를 통해 보안성과 사용 편의성을 모두 고려한 운영이 가능합니다.\n설정에 따라 세션 만료 방지 기능을 활성화하거나, 하나의 계정으로 여러 기기에서 동시 사용을 제한할 수 있습니다.\n✅ 세션 연장 옵션 설정\n✔ 설정 파일:\nmanager/bin/process.properties\n✔ 설정 항목:\npreserve.connection.for.editing=true\n설정 화면 편집 중 세션 만료를 방지 (30초 간격\n/api/session/ping\n호출)\n기본값은\nfalse\n이며, 보안 점검 기준에서는 활성화를 제한하기도 함\n✅ 중복 로그인 허용 설정\n✔ 설정 파일:\nmanager/bin/process.properties\n✔ 설정 항목:\nlogin.multi-login.enabled=false\ntrue\n: 다중 로그인 허용 (기본값)\nfalse\n: 새 로그인 발생 시 기존 세션 종료\n운영 환경에서는\nfalse\n설정으로 보안 강화 권장\n✅ 세션 체크 및 타임아웃 구조\n클라이언트 측에서 주기적으로\n/api/session/check\n실행\n일정 시간(기본 30분) 무응답 시 세션 종료 → 자동 로그아웃\n태그/트리거 설정 등 장기 작업 시에는 연장 옵션 사용 권장\n📌 학습 체크포인트\npreserve.connection.for.editing\n옵션은 어떤 상황에서 유용하며, 기본값은 왜\nfalse\n인가요?\nlogin.multi-login.enabled=false\n로 설정하면 어떤 동작 변화가 발생하나요?\n세션 체크는 어떻게 동작하며, 사용자가 인지할 수 있는 메시지나 동작은 어떤 방식으로 전달되나요?\n[STEP 3-3] 암호화 및 SSO 설정\n✅ 개념 요약\nWiseCollector는 기업 환경에 맞는\n암호화 통신 설정\n과\nSSO(Single Sign-On)\n기능을 지원합니다.\nSSO를 활용하면 외부 인증 시스템과 연계된 자동 로그인이 가능하며,\n비밀번호 암호화, 계정 자동 생성, ID 암호화 처리\n등도 설정할 수 있습니다.\n✅ 계정 및 비밀번호 정책 설정\n✔ 설정 파일:\nmanager/bin/process.properties\n✔ 설정 예시:\nid.policy.regex=^[a-z]+[a-z0-9]{4,19}$\npassword.policy.count=8\npassword.policy.capitals=1\npassword.policy.numbers=1\npassword.policy.specials=1\naccount.initial.status=INITIAL\naccount.policy.expiration.days=90\n아이디는 영문 소문자로 시작하고 숫자 포함 가능\n비밀번호는 최소 길이, 대문자/숫자/특수문자 포함 등 요구사항 설정 가능\n장기 미사용 계정 자동 잠금 기능 포함\n✅ 암호화 통신 설정\n✔ 설정 파일:\nmanager/bin/process.properties\n✔ 설정 예시:\nssl.protocol=TLSv1.2\nssl.cipher-suites=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\nHTTPS 통신용 SSL 인증서 기반 암호화\n패스워드는\nENC()\n방식으로 암호화 저장 가능\n✅ SSO (Single Sign-On) 설정\n✔ 설정 항목 예시:\nsecurity.sso.enable=true\nsecurity.sso.path=/api/sso/login\nsecurity.sso.defaultId=test01\nsecurity.sso.allow.referrer=wc-test.tistory.com\n외부 URL에서\n/api/sso/login?id={사용자ID}\n요청 시 자동 로그인\n미등록 ID는\ndefaultId\n를 통해 로그인 가능\n✅ 고급 옵션: ID 암호화 및 계정 자동 생성\n✔ ID 암호화 처리:\nprocess.sso.decrypt.login.class=kr.nethru.ncollector.manager.service.account.DefaultNethroSSO\n✔ 계정 자동 생성:\nprocess.sso.login.class=kr.nethru.ncollector.manager.service.account.login.CreateUserSsoLoginProcess\n암호화된 ID 복호화 로그인 지원\n미등록 사용자 ID에 대해 계정 자동 생성 및 이름 자동 입력 가능\n📌 학습 체크포인트\nSSO 링크 방식에서\ndefaultId\n설정은 어떤 상황에서 사용되며, 어떤 제약이 있나요?\n암호화된 ID로 SSO 로그인을 허용하려면 어떤 클래스 설정이 필요하고, 어떤 파일에 적용해야 하나요?\n비밀번호 정책을 설정할 수 있는 항목은 어떤 것이 있으며, 암호화 저장 방식은 어떤 구조인가요?\nSSO 계정 자동 생성 기능은 어떤 조건에서 동작하며, 관련 클래스는 무엇인가요?"
}